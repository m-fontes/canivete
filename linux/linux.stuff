### Linux ###
#############

sed -i "s|[[:space:]]|\n|" filename

while read file; do echo "One file in the list: '$file'"; done < filename
>> Substituindo um espaco em branco por newlines no arquivo. Logica obtida do site abaixo:
>>> http://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-a-bash-variable

cat filestodeploy | sed "s| |\n|g"
>> Mesma substituicao acima, mas sem alterar o arquivo.

wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.rpm
rpm -i jdk-7u79-linux-x64.rpm
>> instalando um JDK via rpm. Lembrar de rm o link simbólico "jexec" se houver erro.
read -n1 -r -p "Pressione 'y' para continuar..." INPUT
echo -e "\nContinuou, digitando '${INPUT}'"
>> pegando um input no shell.

# Configurando acesso por par de chaves SSH:
ssh-keygen -C "SPJEK01"
(/Users/mfontes/.ssh/id_rsa):/Users/mfontes/.ssh/id_rsa_SPJEK01_srvdvpdvlbr04 

>> para gerar uma chave que será usada no login pelo user "SPJEK01" e foi salva no caminho indicado acima

ssh-copy-id -i id_rsa_SPJEK01_srvdvpdvlbr04 SPJEK01@srvdvpdvlbr04
>> copiando a chave indicada pelo parâmetro '-i' para o host "srvdvpdvlbr04", user "SPJEK01"

ssh -i /Users/mfontes/.ssh/id_rsa_SPJEK01_srvdvpdvlbr04 SPJEK01@srvdvpdvlbr04
>> agora este login deve ocorrer com sucesso e sem necessidade de digitação de password.

===================
#!/bin/bash

echo "Group 'docker' currently: "
cat /etc/group | grep docker

usermod -aG docker x183830
usermod -aG docker x184701
usermod -aG docker x185120
usermod -aG docker x184702
usermod -aG docker x117424
usermod -aG docker SPJEK01

echo -e "\nGroup 'docker' now, must have all users added"
cat /etc/group | grep docker

===================

echo "alias 'll'='ls -Ghal'" >> ~/.bashrc && echo "alias '..'='cd ..'" >> ~/.bashrc && source ~/.bashrc
>> setting useful aliases on current Bash RC file

[ -d dsl-pipeline-java ] && rm -rf dsl-pipeline-java/* || mkdir dsl-pipeline-java
>> um modo de criar diretorios de uma maneira "segura" num script.
>> Verifica se o dir existe, se existir limpa seu conteudo; se nao existir, cria.

echo -e "Acquire::http::Proxy \"http://proxyapp.santanderbr.corp:80\";" > /etc/apt/apt.conf &&
apt-get update &&
apt-get install -y --force-yes --fix-missing vim
>> instalando vim em sistemas Debian

tar czf t.tgz --exclude "./init.groovy.d" .
>> criando .tgz desconsiderando um dir

for i in $(find ../shared_libs/ -name "npm-shrinkwrap.json"); do sed -i "s|registry.npmjs.org|180.154.138.111:8081\/repository\/npm-all|g" $i; done && for i in $(find ../shared_libs/ -name "npm-shrinkwrap.json"); do sed -i "s|https|http|g" $i; done

sed -r -i "s|(\"version\":.*[0-9.]+)|&-SNAPSHOT-35|" package.json
>> reaproveitando a string encontrada para append de outra substring

for img in $(ls *tar); do docker load -i $img; done
>> executando um comando para todos os resultados do 'for'

sh "echo \"docker stop \$(docker ps --format {{.Names}} | grep \"dev_nexus\" | head -1)\""
>> no pipe do Jenkins

date +%Y_%m_%d_%Hh_%Mmin_%Ss
>> devolve horario no formato: YYYY_mm_dd_<horas>_<minutos>_<segundos>

[ -f .npmrc ] && echo "cache=$(pwd)" >> .npmrc || echo "cache=$(pwd)" > .npmrc
>> Executa o primeiro comando se o arquivo ja existe; executa segundo comando se o arquivo nao existe

sudo chkconfig docker on
>> para habilitar o servico do docker permanentemente ao iniciar a VM

